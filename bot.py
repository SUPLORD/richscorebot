from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from reportlab.pdfgen import canvas

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_GOAL, ASK_REASON, ASK_AMOUNT, ASK_MONTHLY = range(4)

# –ü–∞–º—è—Ç—å
user_data = {}

# –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
GOALS = ["üì± –ê–π—Ñ–æ–Ω", "üöó –ú–∞—à–∏–Ω–∞", "üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞", "üè¢ –ü–µ–Ω—Ç—Ö–∞—É—Å", "üå¥ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", "üíº –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø RICHSCORE. –Ø –Ω–µ –±—Ä–æ–∫–µ—Ä –∏ –Ω–µ –¶–ë ‚Äî —è —á–µ—Å—Ç–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–î–∞–≤–∞–π —Ä–∞–∑–ª–æ–∂–∏–º —Ç–≤–æ—é –º–µ—á—Ç—É –ø–æ –ø–æ–ª–æ—á–∫–∞–º. –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:",
        reply_markup=ReplyKeyboardMarkup([GOALS], one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSING_GOAL

async def choose_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text
    user_data[update.effective_user.id] = {"goal": goal}
    await update.message.reply_text(
        f"–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä ‚Äî {goal}.\n–¢—ã —Ö–æ—á–µ—à—å —ç—Ç–æ —Ä–∞–¥–∏ –∫–∞–π—Ñ–∞ –∏–ª–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏?"
    )
    return ASK_REASON

async def ask_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text
    user_data[update.effective_user.id]["reason"] = reason
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞ —ç—Ç–æ –≤ —Ä—É–±–ª—è—Ö?")
    return ASK_AMOUNT

async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(" ", ""))
    except:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: 500000")
        return ASK_AMOUNT
    user_data[update.effective_user.id]["amount"] = amount
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü?")
    return ASK_MONTHLY

async def ask_monthly(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        monthly = float(update.message.text.replace(" ", ""))
    except:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 10000")
        return ASK_MONTHLY

    data = user_data[update.effective_user.id]
    data["monthly"] = monthly
    r = 0.01  # 12% –≥–æ–¥–æ–≤—ã—Ö / 12 –º–µ—Å—è—Ü–µ–≤
    amount, pmt = data["amount"], data["monthly"]

    # –†–∞—Å—á—ë—Ç —Å—Ä–æ–∫–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö)
    if pmt <= 0 or r <= 0:
        months = 999
    else:
        from math import log, ceil
        months = ceil(log((pmt + r * 0) / (pmt + r * 0 - r * amount)) / log(1 + r))

    years = months // 12
    months_left = months % 12

    data["years"], data["months_left"] = years, months_left

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    filename = f"richscore_{update.effective_user.id}.pdf"
    c = canvas.Canvas(filename)
    c.setFont("Helvetica", 14)
    c.drawString(100, 800, f"üéØ –¶–µ–ª—å: {data['goal']}")
    c.drawString(100, 780, f"üí≠ –ü—Ä–∏—á–∏–Ω–∞: {data['reason']}")
    c.drawString(100, 760, f"üí∞ –°—É–º–º–∞: {amount:,.0f} ‚ÇΩ")
    c.drawString(100, 740, f"üì¶ –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –º–µ—Å—è—Ü: {pmt:,.0f} ‚ÇΩ")
    c.drawString(100, 720, f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 12% –≥–æ–¥–æ–≤—ã—Ö")
    c.drawString(100, 700, f"‚è≥ –°—Ä–æ–∫: {years} –ª–µ—Ç –∏ {months_left} –º–µ—Å—è—Ü–µ–≤")
    c.drawString(100, 660, "‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç, –∞ –¥—Ä—É–∂–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç.")
    c.drawString(100, 640, "–Ø –Ω–µ –¶–ë, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å —á–µ—Å—Ç–Ω—ã–º ü§ù")
    c.save()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF
    await update.message.reply_document(open(filename, "rb"), filename="–¢–≤–æ–π_—Ä–∞—Å–∫–ª–∞–¥_RICHSCORE.pdf")

    await update.message.reply_text("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ü–µ–ª—å ‚Äî –Ω–∞–±–µ—Ä–∏ /start.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, —Ä–∞—Å–∫–ª–∞–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

app = ApplicationBuilder().token("7572906236:AAE7kinfyi_1oIA6Kg4MpYNONBniqIATffc").build()

conv = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_goal)],
        ASK_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_reason)],
        ASK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_amount)],
        ASK_MONTHLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_monthly)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv)

print("‚ñ∂Ô∏è –ë–û–¢ –ó–ê–ü–£–©–ï–ù... RICHSCORE –∂–¥—ë—Ç —Ç–µ–±—è.")
app.run_polling()
