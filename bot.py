import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

TOKEN = os.getenv("BOT_TOKEN")

# –≠—Ç–∞–ø—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
(NAME, GOAL, DREAM, AMOUNT, MONTHLY, PERSONALITY, SHOW_PLAN) = range(7)
user_data = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø RICHSCORE ‚Äî —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥—Ä—É–≥, –º–µ–Ω—Ç–æ—Ä, –∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç –¥–µ–Ω–µ–≥.\n"
        "–û–±–µ—â–∞—é: –Ω–∏–∫–∞–∫–æ–≥–æ –∑–∞–Ω—É–¥—Å—Ç–≤–∞, —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Ñ–∏—à–∫–∏.\n\n"
        "–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–ò–º—è, –Ω–∏–∫, —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π ‚Äî –≤—Å—ë —á–µ—Å—Ç–Ω–æ!)"
    )
    return NAME

# –ò–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data["name"] = name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–ª–∏ –º–µ—á—Ç—É (–º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é):",
        reply_markup=ReplyKeyboardMarkup(
            [["üíº –ë–∏–∑–Ω–µ—Å", "üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞", "üöò –ú–∞—à–∏–Ω–∞"],
             ["üì± –ê–π—Ñ–æ–Ω", "üå¥ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", "üí∞ –°–≤–æ–±–æ–¥–∞"],
             ["‚úçÔ∏è –°–≤–æ—è —Ü–µ–ª—å"]],
            one_time_keyboard=True, resize_keyboard=True)
    )
    return GOAL

# –¶–µ–ª—å –∏–ª–∏ –º–µ—á—Ç–∞
async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text
    context.user_data["goal"] = goal
    if goal == "‚úçÔ∏è –°–≤–æ—è —Ü–µ–ª—å":
        await update.message.reply_text(
            "–¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞, –∫–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—à—å:"
        )
        return DREAM
    await update.message.reply_text(
        f"–í–∞—É, {goal} ‚Äî –º–æ—â–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ ‚ÇΩ):",
        reply_markup=ReplyKeyboardRemove()
    )
    return AMOUNT

async def get_dream(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dream = update.message.text
    context.user_data["goal"] = dream
    await update.message.reply_text(
        f"–°—É–ø–µ—Ä, —Ü–µ–ª—å –∑–∞–ø–∏—Å–∞–ª: {dream}\n\n"
        "–¢–µ–ø–µ—Ä—å —Å—É–º–º–∞ –Ω–∞ –º–µ—á—Ç—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ ‚ÇΩ):"
    )
    return AMOUNT

# –°—É–º–º–∞
async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = int(update.message.text.replace(" ", ""))
        context.user_data["amount"] = amount
        await update.message.reply_text(
            f"–û–∫–µ–π, {amount:,} ‚ÇΩ ‚Äî –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç.\n\n"
            "–ê —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–µ—à—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü?"
        )
        return MONTHLY
    except Exception:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ. –ü—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return AMOUNT

# –ú–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å
async def get_monthly(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        monthly = int(update.message.text.replace(" ", ""))
        context.user_data["monthly"] = monthly
        await update.message.reply_text(
            "–ß–µ—Å—Ç–Ω–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –≥–æ—Ç–æ–≤ —Ä–∏—Å–∫–æ–≤–∞—Ç—å? (–û—Ç–≤–µ—Ç—å: \"–ú–∏–Ω–∏–º—É–º\", \"–°—Ä–µ–¥–Ω–µ\", \"–ú–∞–∫—Å–∏–º—É–º\")"
        )
        return PERSONALITY
    except Exception:
        await update.message.reply_text("–¶–∏—Ñ—Ä–∞–º–∏, –ø–ª–∏–∑! –°–∫–æ–ª—å–∫–æ –≤ –º–µ—Å—è—Ü –º–æ–∂–µ—à—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å?")
        return MONTHLY

# –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
async def get_personality(update: Update, context: ContextTypes.DEFAULT_TYPE):
    risk = update.message.text.strip().lower()
    context.user_data["risk"] = risk
    name = context.user_data["name"]
    goal = context.user_data["goal"]
    amount = context.user_data["amount"]
    monthly = context.user_data["monthly"]
    risk_map = {
        "–º–∏–Ω–∏–º—É–º": 0.06,
        "—Å—Ä–µ–¥–Ω–µ": 0.12,
        "–º–∞–∫—Å–∏–º—É–º": 0.18
    }
    rate = risk_map.get(risk, 0.10)
    months = 0
    capital = 0
    while capital < amount and months < 1000:
        capital = capital * (1 + rate/12) + monthly
        months += 1
    years = months // 12
    rest_months = months % 12

    personality_tip = {
        "–º–∏–Ω–∏–º—É–º": "–¢—ã ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, –Ω–æ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏ –Ω–µ–º–Ω–æ–≥–æ –∞–≤–∞–Ω—Ç—é—Ä–∏–∑–º–∞!",
        "—Å—Ä–µ–¥–Ω–µ": "–ë–∞–ª–∞–Ω—Å ‚Äî —Ç–≤–æ—ë –≤—Ç–æ—Ä–æ–µ –∏–º—è! –¢—ã –∑–Ω–∞–µ—à—å, –∫–æ–≥–¥–∞ –∏–¥—Ç–∏ –≤–ø–µ—Ä—ë–¥.",
        "–º–∞–∫—Å–∏–º—É–º": "–í–∞—Ö! –¢—ã ‚Äî –≤–æ–ª–∫ –£–æ–ª–ª-—Å—Ç—Ä–∏—Ç! –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ä–∏—Å–∫–∏ –∏ —Å–æ–Ω üòè"
    }.get(risk, "–¢—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ ‚Äî —Ç–∞–∫ –∏ –¥–µ–ª–∞–π!")

    await update.message.reply_text(
        f"üß† {personality_tip}\n\n"
        f"üéØ –¶–µ–ª—å: {goal}\n"
        f"üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ\n"
        f"üíµ –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ—à—å: {monthly:,} ‚ÇΩ/–º–µ—Å\n"
        f"üö¶ –†–∏—Å–∫: {risk.capitalize()}\n"
        f"‚è≥ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫: {years} –ª–µ—Ç –∏ {rest_months} –º–µ—Å—è—Ü–µ–≤\n"
        f"ü§ñ –°–æ–≤–µ—Ç RICHSCORE: —Ö–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å—Å—è ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∫–ª–∞–¥ –∏–ª–∏ —Ü–µ–ª—å —Ä–∞–∑–±–µ–π –Ω–∞ —ç—Ç–∞–ø—ã.\n\n"
        "–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥! –ò–ª–∏ /pro –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (PDF, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞).\n"
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. –Ø —Ä—è–¥–æ–º, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /start üòâ")
    return ConversationHandler.END

app = ApplicationBuilder().token(TOKEN).build()

conv = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
        DREAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dream)],
        AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)],
        MONTHLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_monthly)],
        PERSONALITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_personality)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv)
print("üöÄ –ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø... RICHSCORE –∂–∂—ë—Ç —Ä—ã–Ω–æ–∫.")
app.run_polling()
