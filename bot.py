import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
(
    CHOOSING_NAME,
    CHOOSING_GOAL,
    ASK_AMOUNT,
    ASK_PAYMENT,
    SHOW_RESULT,
) = range(5)

# –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
GOALS = [
    "üíº –ë–∏–∑–Ω–µ—Å",
    "üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞",
    "üöò –ú–∞—à–∏–Ω–∞",
    "üå¥ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ",
    "üì± –ê–π—Ñ–æ–Ω",
    "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä",
    "üí∞ –ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø RICHSCORE, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç üí∏\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    return CHOOSING_NAME

# –ò–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data["name"] = update.message.text
    keyboard = [[g] for g in GOALS]
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {user_data['name']}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return CHOOSING_GOAL

# –¶–µ–ª—å
async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data["goal"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ç–≤–æ—è —Ü–µ–ª—å? (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)")
    return ASK_AMOUNT

# –°—É–º–º–∞ —Ü–µ–ª–∏
async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_data["amount"] = int(update.message.text.replace(" ", ""))
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤ –º–µ—Å—è—Ü? (–≤ —Ä—É–±–ª—è—Ö)")
        return ASK_PAYMENT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
        return ASK_AMOUNT

# –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å –∏ —Ä–∞—Å—á—ë—Ç
async def get_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        payment = int(update.message.text.replace(" ", ""))
        user_data["payment"] = payment

        goal = user_data["goal"]
        amount = user_data["amount"]
        rate = 0.15  # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 15%
        months = 0
        total = 0

        while total < amount and months < 1000:
            total = total * (1 + rate / 12) + payment
            months += 1

        years = months // 12
        rest_months = months % 12

        text = f"""üìä *–¢–í–û–ô –†–ê–°–ö–õ–ê–î*

üéØ –¶–µ–ª—å: {goal}
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üì¶ –í–∑–Ω–æ—Å: {payment:,} ‚ÇΩ / –º–µ—Å
üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 15% –≥–æ–¥–æ–≤—ã—Ö

‚è≥ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫: {years} –ª–µ—Ç –∏ {rest_months} –º–µ—Å

‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ñ–∏–Ω—Å–æ–≤–µ—Ç, –∞ –¥—Ä—É–∂–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç.
–Ø –Ω–µ –¶–ë, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å —á–µ—Å—Ç–Ω—ã–º üòâ
"""
        await update.message.reply_markdown(text)
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start ‚Äî —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å.")
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ.")
        return ASK_PAYMENT

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üöÄ –ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø... RICHSCORE –∂–¥—ë—Ç —Ç–µ–±—è.")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CHOOSING_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
            ASK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)],
            ASK_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_payment)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()
